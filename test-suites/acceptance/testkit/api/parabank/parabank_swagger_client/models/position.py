# coding: utf-8

"""
    The ParaBank REST API

    This API provides access to various ParaBank internal operations  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: webadmin@parabank.parasoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_id': 'int',
        'customer_id': 'int',
        'name': 'str',
        'symbol': 'str',
        'shares': 'int',
        'purchase_price': 'float'
    }

    attribute_map = {
        'position_id': 'positionId',
        'customer_id': 'customerId',
        'name': 'name',
        'symbol': 'symbol',
        'shares': 'shares',
        'purchase_price': 'purchasePrice'
    }

    def __init__(self, position_id=None, customer_id=None, name=None, symbol=None, shares=None, purchase_price=None, _configuration=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._position_id = None
        self._customer_id = None
        self._name = None
        self._symbol = None
        self._shares = None
        self._purchase_price = None
        self.discriminator = None

        if position_id is not None:
            self.position_id = position_id
        if customer_id is not None:
            self.customer_id = customer_id
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if shares is not None:
            self.shares = shares
        if purchase_price is not None:
            self.purchase_price = purchase_price

    @property
    def position_id(self):
        """Gets the position_id of this Position.  # noqa: E501


        :return: The position_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this Position.


        :param position_id: The position_id of this Position.  # noqa: E501
        :type: int
        """

        self._position_id = position_id

    @property
    def customer_id(self):
        """Gets the customer_id of this Position.  # noqa: E501


        :return: The customer_id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Position.


        :param customer_id: The customer_id of this Position.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def name(self):
        """Gets the name of this Position.  # noqa: E501


        :return: The name of this Position.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Position.


        :param name: The name of this Position.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Position.  # noqa: E501


        :return: The symbol of this Position.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Position.


        :param symbol: The symbol of this Position.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def shares(self):
        """Gets the shares of this Position.  # noqa: E501


        :return: The shares of this Position.  # noqa: E501
        :rtype: int
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this Position.


        :param shares: The shares of this Position.  # noqa: E501
        :type: int
        """

        self._shares = shares

    @property
    def purchase_price(self):
        """Gets the purchase_price of this Position.  # noqa: E501


        :return: The purchase_price of this Position.  # noqa: E501
        :rtype: float
        """
        return self._purchase_price

    @purchase_price.setter
    def purchase_price(self, purchase_price):
        """Sets the purchase_price of this Position.


        :param purchase_price: The purchase_price of this Position.  # noqa: E501
        :type: float
        """

        self._purchase_price = purchase_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Position, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Position):
            return True

        return self.to_dict() != other.to_dict()
