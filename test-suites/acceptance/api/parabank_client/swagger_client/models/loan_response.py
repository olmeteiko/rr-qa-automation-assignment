# coding: utf-8

"""
    The ParaBank REST API

    This API provides access to various ParaBank internal operations  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: webadmin@parabank.parasoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LoanResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_date': 'datetime',
        'loan_provider_name': 'str',
        'approved': 'bool',
        'message': 'str',
        'account_id': 'int'
    }

    attribute_map = {
        'response_date': 'responseDate',
        'loan_provider_name': 'loanProviderName',
        'approved': 'approved',
        'message': 'message',
        'account_id': 'accountId'
    }

    def __init__(self, response_date=None, loan_provider_name=None, approved=None, message=None, account_id=None, _configuration=None):  # noqa: E501
        """LoanResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._response_date = None
        self._loan_provider_name = None
        self._approved = None
        self._message = None
        self._account_id = None
        self.discriminator = None

        if response_date is not None:
            self.response_date = response_date
        self.loan_provider_name = loan_provider_name
        if approved is not None:
            self.approved = approved
        if message is not None:
            self.message = message
        if account_id is not None:
            self.account_id = account_id

    @property
    def response_date(self):
        """Gets the response_date of this LoanResponse.  # noqa: E501


        :return: The response_date of this LoanResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._response_date

    @response_date.setter
    def response_date(self, response_date):
        """Sets the response_date of this LoanResponse.


        :param response_date: The response_date of this LoanResponse.  # noqa: E501
        :type: datetime
        """

        self._response_date = response_date

    @property
    def loan_provider_name(self):
        """Gets the loan_provider_name of this LoanResponse.  # noqa: E501


        :return: The loan_provider_name of this LoanResponse.  # noqa: E501
        :rtype: str
        """
        return self._loan_provider_name

    @loan_provider_name.setter
    def loan_provider_name(self, loan_provider_name):
        """Sets the loan_provider_name of this LoanResponse.


        :param loan_provider_name: The loan_provider_name of this LoanResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and loan_provider_name is None:
            raise ValueError("Invalid value for `loan_provider_name`, must not be `None`")  # noqa: E501

        self._loan_provider_name = loan_provider_name

    @property
    def approved(self):
        """Gets the approved of this LoanResponse.  # noqa: E501


        :return: The approved of this LoanResponse.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this LoanResponse.


        :param approved: The approved of this LoanResponse.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def message(self):
        """Gets the message of this LoanResponse.  # noqa: E501


        :return: The message of this LoanResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LoanResponse.


        :param message: The message of this LoanResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def account_id(self):
        """Gets the account_id of this LoanResponse.  # noqa: E501


        :return: The account_id of this LoanResponse.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this LoanResponse.


        :param account_id: The account_id of this LoanResponse.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoanResponse):
            return True

        return self.to_dict() != other.to_dict()
