# coding: utf-8

"""
    The ParaBank REST API

    This API provides access to various ParaBank internal operations  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: webadmin@parabank.parasoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HistoryPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        '_date': 'datetime',
        'closing_price': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        '_date': 'date',
        'closing_price': 'closingPrice'
    }

    def __init__(self, symbol=None, _date=None, closing_price=None, _configuration=None):  # noqa: E501
        """HistoryPoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self.__date = None
        self._closing_price = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if _date is not None:
            self._date = _date
        if closing_price is not None:
            self.closing_price = closing_price

    @property
    def symbol(self):
        """Gets the symbol of this HistoryPoint.  # noqa: E501


        :return: The symbol of this HistoryPoint.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this HistoryPoint.


        :param symbol: The symbol of this HistoryPoint.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def _date(self):
        """Gets the _date of this HistoryPoint.  # noqa: E501


        :return: The _date of this HistoryPoint.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HistoryPoint.


        :param _date: The _date of this HistoryPoint.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def closing_price(self):
        """Gets the closing_price of this HistoryPoint.  # noqa: E501


        :return: The closing_price of this HistoryPoint.  # noqa: E501
        :rtype: float
        """
        return self._closing_price

    @closing_price.setter
    def closing_price(self, closing_price):
        """Sets the closing_price of this HistoryPoint.


        :param closing_price: The closing_price of this HistoryPoint.  # noqa: E501
        :type: float
        """

        self._closing_price = closing_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoryPoint):
            return True

        return self.to_dict() != other.to_dict()
