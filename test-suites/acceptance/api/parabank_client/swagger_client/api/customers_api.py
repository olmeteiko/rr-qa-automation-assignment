# coding: utf-8

"""
    The ParaBank REST API

    This API provides access to various ParaBank internal operations  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: webadmin@parabank.parasoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_account1(self, customer_id, new_account_type, from_account_id, **kwargs):  # noqa: E501
        """Create a new account  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account1(customer_id, new_account_type, from_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param int new_account_type: Account type (CHECKING, SAVINGS, LOAN) (required)
        :param int from_account_id: Customer funds source account (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_account1_with_http_info(customer_id, new_account_type, from_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_account1_with_http_info(customer_id, new_account_type, from_account_id, **kwargs)  # noqa: E501
            return data

    def create_account1_with_http_info(self, customer_id, new_account_type, from_account_id, **kwargs):  # noqa: E501
        """Create a new account  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_account1_with_http_info(customer_id, new_account_type, from_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param int new_account_type: Account type (CHECKING, SAVINGS, LOAN) (required)
        :param int from_account_id: Customer funds source account (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'new_account_type', 'from_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `create_account1`")  # noqa: E501
        # verify the required parameter 'new_account_type' is set
        if self.api_client.client_side_validation and ('new_account_type' not in params or
                                                       params['new_account_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_account_type` when calling `create_account1`")  # noqa: E501
        # verify the required parameter 'from_account_id' is set
        if self.api_client.client_side_validation and ('from_account_id' not in params or
                                                       params['from_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_account_id` when calling `create_account1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))  # noqa: E501
        if 'new_account_type' in params:
            query_params.append(('newAccountType', params['new_account_type']))  # noqa: E501
        if 'from_account_id' in params:
            query_params.append(('fromAccountId', params['from_account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/createAccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_accounts1(self, customer_id, **kwargs):  # noqa: E501
        """Get Customer Accounts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts1(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts1_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts1_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_accounts1_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get Customer Accounts  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts1_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_accounts1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerId}/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer1(self, customer_id, **kwargs):  # noqa: E501
        """Get Customer Details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer1(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer1_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer1_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_customer1_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get Customer Details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer1_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_customer1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_positions1(self, customer_id, **kwargs):  # noqa: E501
        """Get Positions for Customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_positions1(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_positions1_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_positions1_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_positions1_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get Positions for Customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_positions1_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_positions1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_positions1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerId}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Position]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_customer1(self, customer_id, first_name, last_name, street, city, state, zip_code, phone_number, ssn, username, password, **kwargs):  # noqa: E501
        """Update customer information  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer1(customer_id, first_name, last_name, street, city, state, zip_code, phone_number, ssn, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param str first_name: Customer's given (first) name (required)
        :param str last_name: Customer's surname (last name) (required)
        :param str street: Street Address including bilding number and apartment (if any) (required)
        :param str city: City (required)
        :param str state: US state or Region name (required)
        :param str zip_code: ZIP code or province id (required)
        :param str phone_number: Contact Phone Number (required)
        :param str ssn: Social Security Number (required)
        :param str username: Customer's user name (required)
        :param str password: Customer's password (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_customer1_with_http_info(customer_id, first_name, last_name, street, city, state, zip_code, phone_number, ssn, username, password, **kwargs)  # noqa: E501
        else:
            (data) = self.update_customer1_with_http_info(customer_id, first_name, last_name, street, city, state, zip_code, phone_number, ssn, username, password, **kwargs)  # noqa: E501
            return data

    def update_customer1_with_http_info(self, customer_id, first_name, last_name, street, city, state, zip_code, phone_number, ssn, username, password, **kwargs):  # noqa: E501
        """Update customer information  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer1_with_http_info(customer_id, first_name, last_name, street, city, state, zip_code, phone_number, ssn, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param str first_name: Customer's given (first) name (required)
        :param str last_name: Customer's surname (last name) (required)
        :param str street: Street Address including bilding number and apartment (if any) (required)
        :param str city: City (required)
        :param str state: US state or Region name (required)
        :param str zip_code: ZIP code or province id (required)
        :param str phone_number: Contact Phone Number (required)
        :param str ssn: Social Security Number (required)
        :param str username: Customer's user name (required)
        :param str password: Customer's password (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'first_name', 'last_name', 'street', 'city', 'state', 'zip_code', 'phone_number', 'ssn', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'first_name' is set
        if self.api_client.client_side_validation and ('first_name' not in params or
                                                       params['first_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `first_name` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if self.api_client.client_side_validation and ('last_name' not in params or
                                                       params['last_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `last_name` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'street' is set
        if self.api_client.client_side_validation and ('street' not in params or
                                                       params['street'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `street` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'city' is set
        if self.api_client.client_side_validation and ('city' not in params or
                                                       params['city'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `city` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'state' is set
        if self.api_client.client_side_validation and ('state' not in params or
                                                       params['state'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `state` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'zip_code' is set
        if self.api_client.client_side_validation and ('zip_code' not in params or
                                                       params['zip_code'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `zip_code` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'phone_number' is set
        if self.api_client.client_side_validation and ('phone_number' not in params or
                                                       params['phone_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `phone_number` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'ssn' is set
        if self.api_client.client_side_validation and ('ssn' not in params or
                                                       params['ssn'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ssn` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in params or
                                                       params['username'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `username` when calling `update_customer1`")  # noqa: E501
        # verify the required parameter 'password' is set
        if self.api_client.client_side_validation and ('password' not in params or
                                                       params['password'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `password` when calling `update_customer1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []
        if 'first_name' in params:
            query_params.append(('firstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('lastName', params['last_name']))  # noqa: E501
        if 'street' in params:
            query_params.append(('street', params['street']))  # noqa: E501
        if 'city' in params:
            query_params.append(('city', params['city']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'zip_code' in params:
            query_params.append(('zipCode', params['zip_code']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501
        if 'ssn' in params:
            query_params.append(('ssn', params['ssn']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/update/{customerId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
