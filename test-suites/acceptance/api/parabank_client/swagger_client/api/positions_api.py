# coding: utf-8

"""
    The ParaBank REST API

    This API provides access to various ParaBank internal operations  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: webadmin@parabank.parasoft.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PositionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def buy_position1(self, customer_id, account_id, name, symbol, shares, price_per_share, **kwargs):  # noqa: E501
        """Buy a Position  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.buy_position1(customer_id, account_id, name, symbol, shares, price_per_share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param int account_id: Customer funds source account (required)
        :param str name: Instrument's Name (required)
        :param str symbol: Instrument's exchange symbol (required)
        :param int shares: number of shares (required)
        :param float price_per_share: Price of each share (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.buy_position1_with_http_info(customer_id, account_id, name, symbol, shares, price_per_share, **kwargs)  # noqa: E501
        else:
            (data) = self.buy_position1_with_http_info(customer_id, account_id, name, symbol, shares, price_per_share, **kwargs)  # noqa: E501
            return data

    def buy_position1_with_http_info(self, customer_id, account_id, name, symbol, shares, price_per_share, **kwargs):  # noqa: E501
        """Buy a Position  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.buy_position1_with_http_info(customer_id, account_id, name, symbol, shares, price_per_share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param int account_id: Customer funds source account (required)
        :param str name: Instrument's Name (required)
        :param str symbol: Instrument's exchange symbol (required)
        :param int shares: number of shares (required)
        :param float price_per_share: Price of each share (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'account_id', 'name', 'symbol', 'shares', 'price_per_share']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method buy_position1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `buy_position1`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `buy_position1`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `buy_position1`")  # noqa: E501
        # verify the required parameter 'symbol' is set
        if self.api_client.client_side_validation and ('symbol' not in params or
                                                       params['symbol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `symbol` when calling `buy_position1`")  # noqa: E501
        # verify the required parameter 'shares' is set
        if self.api_client.client_side_validation and ('shares' not in params or
                                                       params['shares'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `shares` when calling `buy_position1`")  # noqa: E501
        # verify the required parameter 'price_per_share' is set
        if self.api_client.client_side_validation and ('price_per_share' not in params or
                                                       params['price_per_share'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `price_per_share` when calling `buy_position1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'shares' in params:
            query_params.append(('shares', params['shares']))  # noqa: E501
        if 'price_per_share' in params:
            query_params.append(('pricePerShare', params['price_per_share']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerId}/buyPosition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Position]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_position1(self, position_id, **kwargs):  # noqa: E501
        """Get Position by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_position1(position_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int position_id: Unique identifier for the position (required)
        :return: Position
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_position1_with_http_info(position_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_position1_with_http_info(position_id, **kwargs)  # noqa: E501
            return data

    def get_position1_with_http_info(self, position_id, **kwargs):  # noqa: E501
        """Get Position by id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_position1_with_http_info(position_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int position_id: Unique identifier for the position (required)
        :return: Position
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['position_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_position1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'position_id' is set
        if self.api_client.client_side_validation and ('position_id' not in params or
                                                       params['position_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position_id` when calling `get_position1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Position',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_position_history1(self, position_id, start_date, end_date, **kwargs):  # noqa: E501
        """Get Position history by id within a date range  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_position_history1(position_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int position_id: Unique identifier for the position (required)
        :param str start_date: Search starting date (required)
        :param str end_date: Search ending date (required)
        :return: list[HistoryPoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_position_history1_with_http_info(position_id, start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_position_history1_with_http_info(position_id, start_date, end_date, **kwargs)  # noqa: E501
            return data

    def get_position_history1_with_http_info(self, position_id, start_date, end_date, **kwargs):  # noqa: E501
        """Get Position history by id within a date range  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_position_history1_with_http_info(position_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int position_id: Unique identifier for the position (required)
        :param str start_date: Search starting date (required)
        :param str end_date: Search ending date (required)
        :return: list[HistoryPoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['position_id', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_position_history1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'position_id' is set
        if self.api_client.client_side_validation and ('position_id' not in params or
                                                       params['position_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position_id` when calling `get_position_history1`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `get_position_history1`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in params or
                                                       params['end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end_date` when calling `get_position_history1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'position_id' in params:
            path_params['positionId'] = params['position_id']  # noqa: E501
        if 'start_date' in params:
            path_params['startDate'] = params['start_date']  # noqa: E501
        if 'end_date' in params:
            path_params['endDate'] = params['end_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/positions/{positionId}/{startDate}/{endDate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HistoryPoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_positions1(self, customer_id, **kwargs):  # noqa: E501
        """Get Positions for Customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_positions1(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_positions1_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_positions1_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_positions1_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Get Positions for Customer  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_positions1_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_positions1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `get_positions1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerId}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Position]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sell_position1(self, customer_id, account_id, position_id, shares, price_per_share, **kwargs):  # noqa: E501
        """Sell a Position  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sell_position1(customer_id, account_id, position_id, shares, price_per_share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param int account_id: Customer funds target account (required)
        :param int position_id: Unique identifier for the position (required)
        :param int shares: number of shares (required)
        :param float price_per_share: Price of each share (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sell_position1_with_http_info(customer_id, account_id, position_id, shares, price_per_share, **kwargs)  # noqa: E501
        else:
            (data) = self.sell_position1_with_http_info(customer_id, account_id, position_id, shares, price_per_share, **kwargs)  # noqa: E501
            return data

    def sell_position1_with_http_info(self, customer_id, account_id, position_id, shares, price_per_share, **kwargs):  # noqa: E501
        """Sell a Position  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sell_position1_with_http_info(customer_id, account_id, position_id, shares, price_per_share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int customer_id: Customer's id (required)
        :param int account_id: Customer funds target account (required)
        :param int position_id: Unique identifier for the position (required)
        :param int shares: number of shares (required)
        :param float price_per_share: Price of each share (required)
        :return: list[Position]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'account_id', 'position_id', 'shares', 'price_per_share']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sell_position1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if self.api_client.client_side_validation and ('customer_id' not in params or
                                                       params['customer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `customer_id` when calling `sell_position1`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `sell_position1`")  # noqa: E501
        # verify the required parameter 'position_id' is set
        if self.api_client.client_side_validation and ('position_id' not in params or
                                                       params['position_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position_id` when calling `sell_position1`")  # noqa: E501
        # verify the required parameter 'shares' is set
        if self.api_client.client_side_validation and ('shares' not in params or
                                                       params['shares'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `shares` when calling `sell_position1`")  # noqa: E501
        # verify the required parameter 'price_per_share' is set
        if self.api_client.client_side_validation and ('price_per_share' not in params or
                                                       params['price_per_share'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `price_per_share` when calling `sell_position1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'position_id' in params:
            query_params.append(('positionId', params['position_id']))  # noqa: E501
        if 'shares' in params:
            query_params.append(('shares', params['shares']))  # noqa: E501
        if 'price_per_share' in params:
            query_params.append(('pricePerShare', params['price_per_share']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/customers/{customerId}/sellPosition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Position]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
